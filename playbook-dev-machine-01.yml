- hosts: devmachine
  become: true
  vars:
    dev_user_name: bnagi
    headless_vm: true
    with_tailscale: true
  tasks:
    - name: Create Project Dirs
      become_user: "{{dev_user_name }}" #will need to figure out how to generalize this one day
      ansible.builtin.file:
        path: "/home/{{dev_user_name}}/{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - "projects/work"
        - "projects/personal"
        - "venv"
    - name: Clone dotfiles
      become_user: "{{dev_user_name }}" #will need to figure out how to generalize this one day
      ansible.builtin.git:
        repo: 'git@github.com:nagibyro/dotfiles.git'
        dest: '~/dotfiles'
        key_file: '~/.ssh/id_ed25519'
    - name: Install Dev Packages
      ansible.builtin.dnf:
        name:
          - '@development-tools' # @Development Tools for fedora before 41
          - '@development-libs' #@Development Libraries for fedora before 41
          - gcc-c++
          - git
          - powerline-fonts
          - fd-find
          - ripgrep
          - nodejs
          - erlang
          - elixir
          - just
          - neovim
          - inotify-tools
          - libpq-devel
          - stow
        update_cache: true
        state: latest
    - name: Stow Dotfiles
      become_user: "{{dev_user_name }}"
      ansible.builtin.shell:
        cmd: |
          stow .
        chdir: ~/dotfiles
    - name: Install Auto Updates
      ansible.builtin.dnf:
        name:
          - dnf-automatic
          - yum-utils
        state: latest
    - name: Add Auto updates config
      ansible.builtin.copy:
        src: ./files/dev-machine/dnf-automatic.conf
        dest: /etc/dnf/automatic.conf
      notify:
        - enable dnf automatic
        - restart dnf automatic
    - name: Enable starship copr repo
      community.general.copr:
        name: atim/starship
        state: enabled
    - name: Install Starship Cli
      ansible.builtin.dnf:
        name: starship
    - name: Setup Bash to use Starship cli
      become_user: "{{dev_user_name }}"
      ansible.builtin.copy:
        src: ./files/dev-machine/add-starship
        dest: ~/.bashrc.d/
    - name: Install Starship Cli
      ansible.builtin.dnf:
        name: starship
    - name: Enable Ghostty copr repo
      community.general.copr:
        name: pgdev/ghostty
        state: enabled
      when: not headless_vm | bool
    - name: Install Ghostty
      ansible.builtin.dnf:
        name: ghostty
      when: not headless_vm | bool
    - name: Install Qemu Guest Package
      ansible.builtin.dnf:
        name:
          - qemu-guest-agent
        update_cache: true
        state: latest
      when: ansible_system_vendor == 'QEMU'
      notify:
        - enable Qemu Agent
        - restart Qemu Agent
    - name: Clone pyenv
      become_user: "{{dev_user_name }}" #will need to figure out how to generalize this one day
      ansible.builtin.git:
        repo: 'git@github.com:pyenv/pyenv.git'
        dest: '~/opt/pyenv'
        version: v2.5.0
        depth: 1
        key_file: '~/.ssh/id_ed25519'
    - name: Compile pyenv bash extension
      become_user: "{{dev_user_name }}"
      ansible.builtin.shell:
        cmd: |
          src/configure && make -C src
        chdir: ~/opt/pyenv
    - name: Add pyenv to path
      become_user: "{{dev_user_name }}"
      ansible.builtin.copy:
        src: ./files/dev-machine/add-pyenv-path
        dest: ~/.bashrc.d/
    - name: Import 1Password yum public key
      ansible.builtin.rpm_key:
        state: present
        key: https://downloads.1password.com/linux/keys/1password.asc
    - name: Add 1Password repo
      ansible.builtin.yum_repository:
        name: 1password
        description: 1password Stable Channel
        baseurl: https://downloads.1password.com/linux/rpm/stable/$basearch
        enabled: true
        gpgcheck: true
        gpgkey: https://downloads.1password.com/linux/keys/1password.asc
    - name: Install 1Password cli
      ansible.builtin.dnf:
        name:
          - 1password-cli
        update_cache: true
        state: latest
    - name: Add Docker repo
      ansible.builtin.yum_repository:
        name: docker-ce-stable
        description: Docker CE Stable - $basearch
        baseurl: https://download.docker.com/linux/fedora/$releasever/$basearch/stable
        enabled: true
        gpgcheck: true
        gpgkey: https://download.docker.com/linux/fedora/gpg
    - name: Install Docker
      ansible.builtin.dnf:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        update_cache: true
        state: latest
      notify:
        - enable Docker
        - restart Docker
    - name: Add docker daemon config
      ansible.builtin.copy:
        src: ./files/dev-machine/docker-daemon-config.json
        dest: /etc/docker/daemon.json
      notify:
        - restart Docker
    - name: Add dev_user user to docker group
      ansible.builtin.user:
        name: "{{ dev_user_name }}"
        groups: docker
        append: true
    - name: Check if cargo is installed
      become_user: "{{dev_user_name }}"
      shell: command -v cargo
      register: cargo_exists
      ignore_errors: true
    - name: Download Rust Installer
      become_user: "{{dev_user_name }}"
      when: cargo_exists is failed
      get_url:
        url: https://sh.rustup.rs
        dest: /tmp/sh.rustup.rs
        mode: '0755'
        force: true
      tags:
        - rust
    - name: install rust/cargo
      become_user: "{{dev_user_name }}"
      when: cargo_exists is failed
      shell: /tmp/sh.rustup.rs -y
      tags:
        - rust
    - name: enable tailscale repo
      become: true
      command:
        cmd: dnf config-manager --add-repo https://pkgs.tailscale.com/stable/fedora/tailscale.repo
      args:
        creates: /etc/yum.repos.d/tailscale.repo
      when: with_tailscale | bool
    - name: install tailscale
      ansible.builtin.dnf:
        name:
          - tailscale
        update_cache: true
        state: latest
      notify:
        - enable tailscale
        - restart tailscale
      when: with_tailscale | bool
  handlers:
    - name: restart Qemu Agent
      ansible.builtin.service:
        name: qemu-guest-agent
        state: restarted
    - name: enable Qemu Agent
      ansible.builtin.service:
        name: qemu-guest-agent
        enabled: true
    - name: restart Docker
      ansible.builtin.service:
        name: docker
        state: restarted
    - name: enable Docker
      ansible.builtin.service:
        name: docker
        enabled: true
    - name: enable dnf automatic
      ansible.builtin.service:
        name: dnf-automatic-install.timer
        enabled: true
    - name: restart dnf automatic
      ansible.builtin.service:
        name: dnf-automatic-install.timer
        state: restarted
    - name: enable tailscale
      ansible.builtin.service:
        name: tailscaled
        enabled: true
    - name: restart tailscale
      ansible.builtin.service:
        name: tailscaled
        state: restarted
